<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C# 7.0 ref local and returns</title>
      <link href="/2020/01/09/csharp-7-ref-local-and-returns/"/>
      <url>/2020/01/09/csharp-7-ref-local-and-returns/</url>
      
        <content type="html"><![CDATA[<p>實驗一下 C# 7.0 ref local 和 returns 的功能</p><p>使用 <a href="https://www.linqpad.net/" target="_blank" rel="noopener">LINQPad 6</a> 測試</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  PriceA<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 199</span>  PriceB<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 99</span>  PriceC<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 9</span>  <span class="token string">"---"</span><span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span><span class="token string">"GetPriceA()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">ref</span> <span class="token keyword">decimal</span> price <span class="token operator">=</span> <span class="token keyword">ref</span> <span class="token function">GetPriceA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  PriceA<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 199</span>  <span class="token punctuation">(</span><span class="token operator">++</span>price<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span><span class="token string">"price++"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  PriceA<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 200</span>  <span class="token string">"---"</span><span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span><span class="token string">"GetPriceB()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  price <span class="token operator">=</span> <span class="token function">GetPriceB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  price<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span><span class="token string">"price"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 99</span>  PriceA<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 99</span>  PriceB<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 99</span>  <span class="token punctuation">(</span><span class="token operator">++</span>price<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span><span class="token string">"price++"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 100</span>  PriceA<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 100</span>  PriceB<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 99</span>  <span class="token string">"---"</span><span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span><span class="token string">"ref GetPriceC()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  price <span class="token operator">=</span> <span class="token keyword">ref</span> <span class="token function">GetPriceC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  price<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span><span class="token string">"price"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 9</span>  PriceA<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 100</span>  PriceB<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 99</span>  PriceC<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 9</span>  <span class="token punctuation">(</span><span class="token operator">++</span>price<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span><span class="token string">"price++"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 10</span>  PriceA<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 100</span>  PriceB<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 99</span>  PriceC<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 10</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">decimal</span> PriceA <span class="token operator">=</span> <span class="token number">199</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">decimal</span> PriceB <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">decimal</span> PriceC <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">ref</span> <span class="token keyword">decimal</span> <span class="token function">GetPriceA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">ref</span> <span class="token keyword">this</span><span class="token punctuation">.</span>PriceA<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">decimal</span> <span class="token function">GetPriceB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>PriceB<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">ref</span> <span class="token keyword">decimal</span> <span class="token function">GetPriceC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">ref</span> <span class="token keyword">this</span><span class="token punctuation">.</span>PriceC<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://gist.github.com/GhostTW/bae9c6b000db9193dd8600e18083c26f" target="_blank" rel="noopener">Code</a><br><a href="https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7#ref-locals-and-returns" target="_blank" rel="noopener">csharp-7#ref-locals-and-returns</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> dotnet </tag>
            
            <tag> csharp </tag>
            
            <tag> c#7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# 8 readonly struct method 會有 defensive copy</title>
      <link href="/2020/01/07/csharp-8-readonly-struct-method/"/>
      <url>/2020/01/07/csharp-8-readonly-struct-method/</url>
      
        <content type="html"><![CDATA[<p>今天抽空在看 C# 8 的新特性，有一個 readonly method 讓我有了興趣，也順便試了新功能不同的組合應用。</p><h2 id="Readonly-Method"><a href="#Readonly-Method" class="headerlink" title="Readonly Method"></a>Readonly Method</h2><p>這個功能主要是限制及提示該 Method 的應用不會更改到該 instance 的值。</p><p>我就來試看看了先是加在 class 上的 method，結果就出現了 compile error <code>CS0106 The modifier &#39;readonly&#39; is not valid for this item</code></p><p>原來這東西不能用在 class 上，文件沒有好好細讀就想試…</p><p>另外這個功能與 C# 7.2 的 ref readonly 是不一樣的</p><h3 id="Readonly-Method-in-Class"><a href="#Readonly-Method-in-Class" class="headerlink" title="Readonly Method in Class"></a>Readonly Method in Class</h3><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  t<span class="token punctuation">.</span>Number <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> Number<span class="token punctuation">;</span>  <span class="token keyword">public</span>  <span class="token keyword">int</span> Square <span class="token operator">=</span><span class="token operator">></span> Number<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">readonly</span> <span class="token keyword">override</span> <span class="token keyword">string</span> <span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// CS0106 The modifier 'readonly' is not valid for this item</span>  <span class="token punctuation">{</span>    <span class="token keyword">return</span> Square<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Readonly-Method-in-Struct"><a href="#Readonly-Method-in-Struct" class="headerlink" title="Readonly Method in Struct"></a>Readonly Method in Struct</h3><p>那我們改到 struct 來試看看，不過在使用新的 readonly method 前，我們先來看這個例子，你們覺得會印出什麼值?</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  t<span class="token punctuation">.</span>Number <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">struct</span> Test<span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> Number<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> Square <span class="token operator">=</span><span class="token operator">></span> Number<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">string</span> <span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">return</span> Square<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-txt"><code class="language-txt">12</code></pre><p>那使用 readonly 之後呢?</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  t<span class="token punctuation">.</span>Number <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">struct</span> Test<span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> Number<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> Square <span class="token operator">=</span><span class="token operator">></span> Number<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">readonly</span> <span class="token keyword">override</span> <span class="token keyword">string</span> <span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">return</span> Square<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-txt"><code class="language-txt">11</code></pre><p>readonly method 因為無法判斷所使用的欄位有沒有去改到值，無論你是不是只有用 property 而且只實作 get 而已，它還是只能給你個提醒</p><img src="/2020/01/07/csharp-8-readonly-struct-method/warning-readonly.png" title="warning-readonly"><p>然後在 IL code 上面做一個 defensive copy 將整個 struct 再複製一份到 stack 上面使用 <code>IL_0001: ldobj UserQuery.Test</code><br>這樣的結果會讓每次執行 ToString() 都使用一份新的實體，而不會去改到原本的實體，所以最後印出來兩次都是 <code>1</code>。</p><pre class=" language-il"><code class="language-il">Test.ToString:IL_0000:  ldarg.0IL_0001:  ldobj       UserQuery.Test // defensive copyIL_0006:  stloc.0IL_0007:  ldloca.s    00IL_0009:  call        UserQuery+Test.get_SquareIL_000E:  stloc.1IL_000F:  ldloca.s    01IL_0011:  call        System.Int32.ToStringIL_0016:  ret  </code></pre><p>那我們該如何避免這個狀況呢?</p><p>我們依照 Compiler 的提示將使用的 readonly 補上，並換個情境不去修改自己的值，如果實務上有需要的話，就不應該使用 readonly method。</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  t<span class="token punctuation">.</span>Number <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  t<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  t<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">struct</span> Test<span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> Number<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">readonly</span> <span class="token keyword">int</span> Square <span class="token operator">=</span><span class="token operator">></span> Number <span class="token operator">+</span> Number<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">readonly</span> <span class="token keyword">override</span> <span class="token keyword">string</span> <span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">return</span> Square<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-il"><code class="language-il">Test.ToString:IL_0000:  ldarg.0IL_0001:  call        UserQuery+Test.get_SquareIL_0006:  stloc.0IL_0007:  ldloca.s    00IL_0009:  call        System.Int32.ToStringIL_000E:  ret</code></pre><p>這樣就沒有 defensive copy 了!</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://github.com/GhostTW/demos/tree/master/ReadonlyStructMethod" target="_blank" rel="noopener">code</a><br><a href="https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8#readonly-members" target="_blank" rel="noopener">csharp-8#readonly-members</a><br><a href="https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.opcodes.ldobj?view=netcore-3.1" target="_blank" rel="noopener">opcodes.ldobj</a><br><a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-7.2/readonly-ref#readonly-ref-locals" target="_blank" rel="noopener">7.2readonly-ref</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> dotnet </tag>
            
            <tag> csharp </tag>
            
            <tag> c#8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 .Net Core Console 依環境使用不同設定檔</title>
      <link href="/2019/12/26/net-core3-config-depends-on-different-environment/"/>
      <url>/2019/12/26/net-core3-config-depends-on-different-environment/</url>
      
        <content type="html"><![CDATA[<p>上次有提到如何在 Console 使用 .Net Core 的 Configuration 自動對應到 class。</p><p>今天遇到需要依環境使用不同的環境設定檔，筆記一下。</p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><p>Visual Studio 2019<br>.Net Core 3.1</p><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><ol><li>設定 Debug 執行的環境變數<ol><li>在 Solution Explorer 要執行的專案上按右鍵選 Properties</li><li>選 Debug 分頁</li><li>在 Environment variables 加入 Name: <code>HOSTING_ENVIRONMENT</code> Value: <code>Development</code></li></ol></li><li>在 <code>appsettings.json</code> 同個位置的地方加入新的設定檔 <code>appsettings.Development.json</code> ，這份設定檔可以加入該環境需要的不同參數。</li><li>程式碼的部分加入如下</li></ol><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">var</span> environmentName <span class="token operator">=</span> Environment<span class="token punctuation">.</span><span class="token function">GetEnvironmentVariable</span><span class="token punctuation">(</span><span class="token string">"HOSTING_ENVIRONMENT"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConfigurationBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">SetBasePath</span><span class="token punctuation">(</span>Directory<span class="token punctuation">.</span><span class="token function">GetCurrentDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">AddJsonFile</span><span class="token punctuation">(</span><span class="token string">"appsettings.json"</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">AddJsonFile</span><span class="token punctuation">(</span>$<span class="token string">"appsettings.{environmentName}.json"</span><span class="token punctuation">,</span> <span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 多加這行</span></code></pre><p>在準備要拿來對應的 class 加入該參數 Property ，在自動對應時就會依環境把值給賦與進去了，環境不對時就是 default 值了。</p><p>至於怎麼對應，class 怎麼寫就參考上一篇吧! <a href="/2019/12/05/net-core3-config-to-class/" title="在 .Net Core Console 自動將設定檔對應到類別上">在 .Net Core Console 自動將設定檔對應到類別上</a></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://stackoverflow.com/questions/36943484/using-asp-net-cores-configurationbuilder-in-a-test-project" target="_blank" rel="noopener">SO</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> dotnet </tag>
            
            <tag> core-3 </tag>
            
            <tag> config </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IEnumerable, Enumerator, LinQ 底層研究及 IEnumerable 不可信的原因!</title>
      <link href="/2019/12/26/ienumerable-enumerator-linq-select-new-object/"/>
      <url>/2019/12/26/ienumerable-enumerator-linq-select-new-object/</url>
      
        <content type="html"><![CDATA[<h2 id="源由"><a href="#源由" class="headerlink" title="源由"></a>源由</h2><p>昨天被朋友問了一個問題，乍看之下以為不是什麼大問題，後來發現自己還是對 <code>IEnumerable</code> 的應用不夠熟，一般也很少這樣寫，沒直覺想到這會是個陷阱。</p><p>題目大概如下，請問會印出值嘛?</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Process</span><span class="token punctuation">(</span>IEnumerable<span class="token operator">&lt;</span>ReferenceClass<span class="token operator">></span> sources<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">foreach</span> <span class="token punctuation">(</span>ReferenceClass item <span class="token keyword">in</span> sources<span class="token punctuation">)</span>      item<span class="token punctuation">.</span>Status <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span>  <span class="token function">ShowSuccessStatus</span><span class="token punctuation">(</span>sources<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">ShowSuccessStatus</span><span class="token punctuation">(</span>IEnumerable<span class="token operator">&lt;</span>ReferenceClass<span class="token operator">></span> sources<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">foreach</span> <span class="token punctuation">(</span>ReferenceClass item <span class="token keyword">in</span> sources<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>item<span class="token punctuation">.</span>Status<span class="token punctuation">)</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"{nameof(item.Status)}: {item.Status}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReferenceClass</span> <span class="token punctuation">{</span> <span class="token keyword">public</span> <span class="token keyword">bool</span> Status <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>答案是，有可能 <code>True</code> 也有可能什麼都印不出來。</p><h2 id="IEnumerable-來源"><a href="#IEnumerable-來源" class="headerlink" title="IEnumerable 來源"></a>IEnumerable 來源</h2><p>這是題目給的資料源</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//var sources = new List&lt;ReferenceClass> { new ReferenceClass(), new ReferenceClass(), new ReferenceClass() };</span>  <span class="token keyword">var</span> sources <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">ReferenceClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">Process</span><span class="token punctuation">(</span>sources<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>比較常用的情境資料來源通常是</p><p><code>var sources = new List&lt;ReferenceClass&gt; { new ReferenceClass(), new ReferenceClass(), new ReferenceClass() };</code></p><p>但這題的陷阱在於資料集是由這個衍生的</p><p><code>var sources = new List&lt;int&gt; { 1,2,3 }).Select(item =&gt; new ReferenceClass());</code></p><p>這樣會導致每次 foreach 時在 Select 才產出 <code>ReferenceClass</code> 物件，所以每次 foreach 都是拿到新一份的物件，第一次 foreach 改得值跟第二次 foreach 改得都不是同一份。</p><p>但是到這邊還不夠呀，我還是很好奇底層做了什麼事，為什麼會讓行為跟我原先預期的不相同!? 好吧，基礎不扎實才是原因呀…<br>我就去看了 List, Enumerable 的實作，不過要先提到 foreach 的運作方式。</p><h2 id="foreach-運作方式"><a href="#foreach-運作方式" class="headerlink" title="foreach 運作方式"></a>foreach 運作方式</h2><p><a href="https://docs.microsoft.com/en-us/archive/msdn-magazine/2017/april/essential-net-understanding-csharp-foreach-internals-and-custom-iterators-with-yield" target="_blank" rel="noopener">微軟這篇</a>講得很清楚，網路上也有很多文章可以看 foreach 運作原理。<br>不外乎就是先跟 <code>IEnumerable.GetEnumerator</code> 拿 Enumerator 然後每次先 <code>MoveNext()</code> 判斷有沒有下個值，並將 Current 換成下一個值，使用時拿 Current 使用。</p><p>如果 foreach 是直接使用 List, Array 都沒問題，因為每次 call by reference 都是拿到原本資料集的實體，但是被 Select 包裝過後就不一樣了。</p><h2 id="Linq-Select"><a href="#Linq-Select" class="headerlink" title="Linq Select"></a>Linq Select</h2><p><a href="https://github.com/microsoft/referencesource/blob/17b97365645da62cf8a49444d979f94a59bbb155/System.Core/System/Linq/Enumerable.cs#L38" target="_blank" rel="noopener">Enumerable.Select</a> 的程式碼在這</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> IEnumerable<span class="token operator">&lt;</span>TResult<span class="token operator">></span> <span class="token generic-method function">Select<span class="token punctuation">&lt;</span>TSource<span class="token punctuation">,</span> TResult<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> IEnumerable<span class="token operator">&lt;</span>TSource<span class="token operator">></span> source<span class="token punctuation">,</span> Func<span class="token operator">&lt;</span>TSource<span class="token punctuation">,</span> TResult<span class="token operator">></span> selector<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>source <span class="token keyword">is</span> Iterator<span class="token operator">&lt;</span>TSource<span class="token operator">></span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Iterator<span class="token operator">&lt;</span>TSource<span class="token operator">></span><span class="token punctuation">)</span>source<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>source <span class="token keyword">is</span> TSource<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WhereSelectArrayIterator</span><span class="token operator">&lt;</span>TSource<span class="token punctuation">,</span> TResult<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">(</span>TSource<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>source<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> selector<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>source <span class="token keyword">is</span> List<span class="token operator">&lt;</span>TSource<span class="token operator">></span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WhereSelectListIterator</span><span class="token operator">&lt;</span>TSource<span class="token punctuation">,</span> TResult<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>TSource<span class="token operator">></span><span class="token punctuation">)</span>source<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> selector<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WhereSelectEnumerableIterator</span><span class="token operator">&lt;</span>TSource<span class="token punctuation">,</span> TResult<span class="token operator">></span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> selector<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>這邊會看到 Select 依 source 類型不同用不同實作包裝，每個類別都是實作 <code>Iterator&lt;TResult&gt;</code> 並把 <a href="https://github.com/microsoft/referencesource/blob/17b97365645da62cf8a49444d979f94a59bbb155/System.Core/System/Linq/Enumerable.cs#L373" target="_blank" rel="noopener">Select 的 lambda 行為存放在 selector delegate 變數</a>，如果你的 IEnumerable 被各種 Linq 包裝過都不會執行。</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">WhereSelectEnumerableIterator</span><span class="token operator">&lt;</span>TSource<span class="token punctuation">,</span> TResult<span class="token operator">></span> <span class="token punctuation">:</span> Iterator<span class="token operator">&lt;</span>TResult<span class="token operator">></span><span class="token punctuation">{</span>  IEnumerable<span class="token operator">&lt;</span>TSource<span class="token operator">></span> source<span class="token punctuation">;</span>  Func<span class="token operator">&lt;</span>TSource<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">></span> predicate<span class="token punctuation">;</span>  Func<span class="token operator">&lt;</span>TSource<span class="token punctuation">,</span> TResult<span class="token operator">></span> selector<span class="token punctuation">;</span>  IEnumerator<span class="token operator">&lt;</span>TSource<span class="token operator">></span> enumerator<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token function">WhereSelectEnumerableIterator</span><span class="token punctuation">(</span>IEnumerable<span class="token operator">&lt;</span>TSource<span class="token operator">></span> source<span class="token punctuation">,</span> Func<span class="token operator">&lt;</span>TSource<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">></span> predicate<span class="token punctuation">,</span> Func<span class="token operator">&lt;</span>TSource<span class="token punctuation">,</span> TResult<span class="token operator">></span> selector<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>source <span class="token operator">=</span> source<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>predicate <span class="token operator">=</span> predicate<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>selector <span class="token operator">=</span> selector<span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p>一直到最後使用到 <code>GetEnumerator</code> 的 <code>MoveNext()</code> <a href="https://github.com/microsoft/referencesource/blob/17b97365645da62cf8a49444d979f94a59bbb155/System.Core/System/Linq/Enumerable.cs#L399" target="_blank" rel="noopener">才是真正執行的地方</a>。</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">bool</span> <span class="token function">MoveNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>          enumerator <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">GetEnumerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          state <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>          <span class="token keyword">goto</span> <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>          <span class="token keyword">while</span> <span class="token punctuation">(</span>enumerator<span class="token punctuation">.</span><span class="token function">MoveNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 這裡會逐步拆包</span>              TSource item <span class="token operator">=</span> enumerator<span class="token punctuation">.</span>Current<span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>predicate <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token function">predicate</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  current <span class="token operator">=</span> <span class="token function">selector</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 這裡執行各包的 select lambda</span>                  <span class="token keyword">return</span> <span class="token keyword">true</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>          <span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token keyword">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>再次認知到不能信任 IEnumerable 的東西。</p><p>話說你看到 goto 了嘛……………..</p>]]></content>
      
      
      
        <tags>
            
            <tag> csharp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# 7 Tuple and ValueTuple</title>
      <link href="/2019/12/18/csharp-7-valuetuple-tuple/"/>
      <url>/2019/12/18/csharp-7-valuetuple-tuple/</url>
      
        <content type="html"><![CDATA[<p>舊功能筆記，太久沒用有些細節忘記了，被提醒了一波，還是筆記下來好了。</p><ul><li>Tuple 是 class</li><li>ValueTuple 是 struct 所以不會被 GC 管控，節省 GC 效能。</li></ul><h2 id="實驗程式"><a href="#實驗程式" class="headerlink" title="實驗程式"></a>實驗程式</h2><ol><li><code>TypeCheck</code> 驗證各種使用方式實際上是用到哪種 Tuple</li><li><code>ValueTypeCheck</code> 驗證兩種 Tuple 哪個是 ValueType</li><li><code>Deconstruction</code> 驗證使用 Deconstruction 的方式</li><li><code>Deconstruction_AsIgnoreVariable</code> 驗證使用 ignore variable 方式</li></ol><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Program</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> Tuple<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> SimpleTuple <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">Tuple</span><span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"testTuple"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span> SimpleValueTuple <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token string">"testValueTuple"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token punctuation">(</span><span class="token keyword">string</span> Name<span class="token punctuation">,</span> <span class="token keyword">int</span> Value<span class="token punctuation">)</span> ValueTupleName <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>Name<span class="token punctuation">:</span> <span class="token string">"testValueTupleName"</span><span class="token punctuation">,</span> Value<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> ValueTuple<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> TypeValueTyple <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>Name<span class="token punctuation">:</span> <span class="token string">"testTypeValueTup"</span><span class="token punctuation">,</span> Value<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> ValueTuple<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> TypeValueTypleA <span class="token operator">=</span><span class="token operator">></span> ValueTuple<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token string">"testTypeValueTup"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Tests</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> Program _sut<span class="token punctuation">;</span>    <span class="token punctuation">[</span>SetUp<span class="token punctuation">]</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        _sut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Program</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">[</span>Test<span class="token punctuation">]</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">TypeCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Assert<span class="token punctuation">.</span><span class="token function">IsTrue</span><span class="token punctuation">(</span>_sut<span class="token punctuation">.</span>SimpleTuple<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span>Tuple<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Assert<span class="token punctuation">.</span><span class="token function">IsTrue</span><span class="token punctuation">(</span>_sut<span class="token punctuation">.</span>SimpleValueTuple<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span>ValueTuple<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Assert<span class="token punctuation">.</span><span class="token function">IsTrue</span><span class="token punctuation">(</span>_sut<span class="token punctuation">.</span>ValueTupleName<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span>ValueTuple<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Assert<span class="token punctuation">.</span><span class="token function">IsTrue</span><span class="token punctuation">(</span>_sut<span class="token punctuation">.</span>TypeValueTyple<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span>ValueTuple<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Assert<span class="token punctuation">.</span><span class="token function">IsTrue</span><span class="token punctuation">(</span>_sut<span class="token punctuation">.</span>TypeValueTypleA<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span>ValueTuple<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">[</span>Test<span class="token punctuation">]</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ValueTypeCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Assert<span class="token punctuation">.</span><span class="token function">IsFalse</span><span class="token punctuation">(</span>_sut<span class="token punctuation">.</span>SimpleTuple<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>IsValueType<span class="token punctuation">)</span><span class="token punctuation">;</span>        Assert<span class="token punctuation">.</span><span class="token function">IsTrue</span><span class="token punctuation">(</span>_sut<span class="token punctuation">.</span>SimpleValueTuple<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>IsValueType<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">[</span>Test<span class="token punctuation">]</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Deconstruction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">var</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token keyword">value</span><span class="token punctuation">)</span> <span class="token operator">=</span> _sut<span class="token punctuation">.</span>SimpleTuple<span class="token punctuation">;</span>        Assert<span class="token punctuation">.</span><span class="token function">AreEqual</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">"testTuple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Assert<span class="token punctuation">.</span><span class="token function">AreEqual</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token keyword">value</span><span class="token punctuation">)</span> <span class="token operator">=</span> _sut<span class="token punctuation">.</span>SimpleValueTuple<span class="token punctuation">;</span>        Assert<span class="token punctuation">.</span><span class="token function">AreEqual</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">"testValueTuple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Assert<span class="token punctuation">.</span><span class="token function">AreEqual</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">[</span>Test<span class="token punctuation">]</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Deconstruction_AsIgnoreVariable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">var</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> _<span class="token punctuation">)</span> <span class="token operator">=</span> _sut<span class="token punctuation">.</span>SimpleTuple<span class="token punctuation">;</span>        Assert<span class="token punctuation">.</span><span class="token function">AreEqual</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">"testTuple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Assert.AreEqual(_, 1); //Error CS0103  The name '_' does not exist in the current context CSharpValueTuple</span>        <span class="token punctuation">(</span>name<span class="token punctuation">,</span> _<span class="token punctuation">)</span> <span class="token operator">=</span> _sut<span class="token punctuation">.</span>SimpleValueTuple<span class="token punctuation">;</span>        Assert<span class="token punctuation">.</span><span class="token function">AreEqual</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">"testValueTuple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Assert.AreEqual(_, 2); //Error CS0103  The name '_' does not exist in the current context CSharpValueTuple</span>    <span class="token punctuation">}</span></code></pre><h2 id="Benchmark"><a href="#Benchmark" class="headerlink" title="Benchmark"></a>Benchmark</h2><p>這邊測試了 Tuple, ValueTuple 的不同使用方式，觀察測試結果，使用 ValueTuple + Deconstruction 會比較快。</p><ul><li>Summary *</li></ul><p>BenchmarkDotNet=v0.12.0, OS=Windows 10.0.19041<br>AMD Ryzen 7 3700X, 1 CPU, 16 logical and 8 physical cores<br>.NET Core SDK=3.1.100<br>[Host] : .NET Core 3.1.0 (CoreCLR 4.700.19.56402, CoreFX 4.700.19.56404), X64 RyuJIT<br>RyuJitX64 : .NET Core 3.1.0 (CoreCLR 4.700.19.56402, CoreFX 4.700.19.56404), X64 RyuJIT</p><p>Jit=RyuJit</p><table><thead><tr><th>Method</th><th>Job</th><th>Platform</th><th>Count</th><th align="right">Mean</th><th align="right">Error</th><th align="right">StdDev</th><th align="right">Ratio</th><th align="right">RatioSD</th></tr></thead><tbody><tr><td>IterateValueTypes</td><td>RyuJitX64</td><td>X64</td><td>100</td><td align="right">71.27 ns</td><td align="right">0.513 ns</td><td align="right">0.480 ns</td><td align="right">1.00</td><td align="right">0.00</td></tr><tr><td>IterateReferenceTypes</td><td>RyuJitX64</td><td>X64</td><td>100</td><td align="right">179.57 ns</td><td align="right">0.687 ns</td><td align="right">0.574 ns</td><td align="right">2.52</td><td align="right">0.02</td></tr><tr><td>IterateValueTypesDeconstructor</td><td>RyuJitX64</td><td>X64</td><td>100</td><td align="right">54.79 ns</td><td align="right">0.392 ns</td><td align="right">0.367 ns</td><td align="right">0.77</td><td align="right">0.01</td></tr><tr><td>IterateReferenceTypesDeconstructor</td><td>RyuJitX64</td><td>X64</td><td>100</td><td align="right">53.14 ns</td><td align="right">0.517 ns</td><td align="right">0.484 ns</td><td align="right">0.75</td><td align="right">0.01</td></tr><tr><td></td><td></td><td></td><td></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td></tr><tr><td>IterateValueTypes</td><td>RyuJitX64</td><td>X64</td><td>100000</td><td align="right">70,376.91 ns</td><td align="right">276.061 ns</td><td align="right">258.228 ns</td><td align="right">1.00</td><td align="right">0.00</td></tr><tr><td>IterateReferenceTypes</td><td>RyuJitX64</td><td>X64</td><td>100000</td><td align="right">178,247.95 ns</td><td align="right">643.249 ns</td><td align="right">570.223 ns</td><td align="right">2.53</td><td align="right">0.01</td></tr><tr><td>IterateValueTypesDeconstructor</td><td>RyuJitX64</td><td>X64</td><td>100000</td><td align="right">50,637.21 ns</td><td align="right">225.525 ns</td><td align="right">210.956 ns</td><td align="right">0.72</td><td align="right">0.00</td></tr><tr><td>IterateReferenceTypesDeconstructor</td><td>RyuJitX64</td><td>X64</td><td>100000</td><td align="right">52,488.01 ns</td><td align="right">317.409 ns</td><td align="right">265.051 ns</td><td align="right">0.75</td><td align="right">0.01</td></tr><tr><td></td><td></td><td></td><td></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td><td align="right"></td></tr><tr><td>IterateValueTypes</td><td>RyuJitX64</td><td>X64</td><td>10000000</td><td align="right">8,931,029.35 ns</td><td align="right">54,181.022 ns</td><td align="right">48,030.065 ns</td><td align="right">1.00</td><td align="right">0.00</td></tr><tr><td>IterateReferenceTypes</td><td>RyuJitX64</td><td>X64</td><td>10000000</td><td align="right">21,009,876.46 ns</td><td align="right">155,797.185 ns</td><td align="right">145,732.783 ns</td><td align="right">2.35</td><td align="right">0.02</td></tr><tr><td>IterateValueTypesDeconstructor</td><td>RyuJitX64</td><td>X64</td><td>10000000</td><td align="right">8,521,969.61 ns</td><td align="right">163,983.042 ns</td><td align="right">195,210.146 ns</td><td align="right">0.95</td><td align="right">0.03</td></tr><tr><td>IterateReferenceTypesDeconstructor</td><td>RyuJitX64</td><td>X64</td><td>10000000</td><td align="right">17,867,946.65 ns</td><td align="right">188,879.313 ns</td><td align="right">167,436.591 ns</td><td align="right">2.00</td><td align="right">0.02</td></tr></tbody></table><pre class=" language-csharp"><code class="language-csharp">Tuple<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrayOfRef<span class="token punctuation">;</span>ValueTuple<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrayOfVal<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//...</span><span class="token punctuation">[</span><span class="token function">Benchmark</span><span class="token punctuation">(</span>Baseline <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">IterateValueTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> item1Sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> item2Sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> array <span class="token operator">=</span> arrayOfVal<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">ref</span> ValueTuple<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> reference <span class="token operator">=</span> <span class="token keyword">ref</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        item1Sum <span class="token operator">+</span><span class="token operator">=</span> reference<span class="token punctuation">.</span>Item1<span class="token punctuation">;</span>        item2Sum <span class="token operator">+</span><span class="token operator">=</span> reference<span class="token punctuation">.</span>Item2<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> item1Sum <span class="token operator">+</span> item2Sum<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">[</span>Benchmark<span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">IterateReferenceTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> item1Sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> item2Sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> array <span class="token operator">=</span> arrayOfRef<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">ref</span> Tuple<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> reference <span class="token operator">=</span> <span class="token keyword">ref</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        item1Sum <span class="token operator">+</span><span class="token operator">=</span> reference<span class="token punctuation">.</span>Item1<span class="token punctuation">;</span>        item2Sum <span class="token operator">+</span><span class="token operator">=</span> reference<span class="token punctuation">.</span>Item2<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> item1Sum <span class="token operator">+</span> item2Sum<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">[</span>Benchmark<span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">IterateValueTypesDeconstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> item1Sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> item2Sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> array <span class="token operator">=</span> arrayOfVal<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">var</span> <span class="token punctuation">(</span>item1<span class="token punctuation">,</span> item2<span class="token punctuation">)</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        item1Sum <span class="token operator">+</span><span class="token operator">=</span> item1<span class="token punctuation">;</span>        item2Sum <span class="token operator">+</span><span class="token operator">=</span> item2<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> item1Sum <span class="token operator">+</span> item2Sum<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">[</span>Benchmark<span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">IterateReferenceTypesDeconstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> item1Sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> item2Sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> array <span class="token operator">=</span> arrayOfRef<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">var</span> <span class="token punctuation">(</span>item1<span class="token punctuation">,</span> item2<span class="token punctuation">)</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        item1Sum <span class="token operator">+</span><span class="token operator">=</span> item1<span class="token punctuation">;</span>        item2Sum <span class="token operator">+</span><span class="token operator">=</span> item2<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> item1Sum <span class="token operator">+</span> item2Sum<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://github.com/GhostTW/demos/tree/master/CSharpValueTuple" target="_blank" rel="noopener">此次程式碼</a></p><p><a href="https://adamsitnik.com/Value-Types-vs-Reference-Types/" target="_blank" rel="noopener">Benchmark</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> dotnet </tag>
            
            <tag> csharp </tag>
            
            <tag> c#7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NUnit 與 xUnit 在 TestCase 預設成員變數生命週期差異</title>
      <link href="/2019/12/17/nunit-xunit-test-case-isolation-setup/"/>
      <url>/2019/12/17/nunit-xunit-test-case-isolation-setup/</url>
      
        <content type="html"><![CDATA[<p>以前寫了好幾年的 xUnit 都沒在用 <code>Setup</code> <code>OneTimeSetup</code> ，TestCase 的 arrange 都擠在開頭，最近用 NUnit 寫，被教導說這樣的重用性很低，應該要擅用 <code>Setup</code> <code>OneTimeSetup</code> 的特性讓程式更乾淨、重用性更高。</p><p>順便測試一下兩種 framework 的 TestCase 對類別成員的生命週期特性差異。</p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Windows 10 Pro version 2004 build 19033.1</li><li>VisualStudio 2019</li><li>dotnet sdk 3.1.100</li><li>NUnit 3.12.0</li><li>xUnit 2.4.1</li></ul><h2 id="NUnit-NonParallel"><a href="#NUnit-NonParallel" class="headerlink" title="NUnit NonParallel"></a>NUnit NonParallel</h2><p>在 NUnit 的流程為 Constructor =&gt; OneTimeSetup =&gt; Setup =&gt; TestCase =&gt; TearDown =&gt; (next setup) =&gt; Dispose =&gt; OneTimeTearDown</p><p>當在 NUnit 使用類別成員變數在不同地方建立實體會有不同效果</p><ul><li><code>list</code> 在 constructor 建立實體，在類別建立時即有實體，後續的各 TestCase 都會用到同一份實體。</li><li><code>listOneTimeSetup</code> 在 <code>OneTimeSetup</code> 建立實體，後續的各 TestCase <strong>還是</strong>會用到同一份實體。</li><li><code>listSetup</code> 在 <code>Setup</code> 建立實體，每個 TestCase 開始前會重新建立一個實體給變數，因為是照順序執行 TestCase 就會使用到新的實體。</li></ul><p>我這邊用大量的 TestCase 模擬多 <code>Test</code> 的行為。</p><pre class=" language-csharp"><code class="language-csharp"><span class="token punctuation">[</span>TestFixture<span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NunitUnitTest</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> List<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> List<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> listSetup<span class="token punctuation">;</span>  <span class="token keyword">public</span> List<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> listOneTimeSetup<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token function">NunitUnitTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">[</span>OneTimeSetUp<span class="token punctuation">]</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">OneTimeInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> listOneTimeSetup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">[</span>SetUp<span class="token punctuation">]</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> listSetup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">[</span>Test<span class="token punctuation">]</span>  <span class="token punctuation">[</span><span class="token function">TestCase</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token punctuation">[</span><span class="token function">TestCase</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token punctuation">[</span><span class="token function">TestCase</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token punctuation">[</span><span class="token function">TestCase</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token punctuation">[</span><span class="token function">TestCase</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token punctuation">[</span><span class="token function">TestCase</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token punctuation">[</span><span class="token function">TestCase</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token punctuation">[</span><span class="token function">TestCase</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token punctuation">[</span><span class="token function">TestCase</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token punctuation">[</span><span class="token function">TestCase</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token punctuation">[</span><span class="token function">TestCase</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token punctuation">[</span><span class="token function">TestCase</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token punctuation">[</span><span class="token function">TestCase</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token punctuation">[</span><span class="token function">TestCase</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token punctuation">[</span><span class="token function">TestCase</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token punctuation">[</span><span class="token function">TestCase</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">TestA</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span>  <span class="token punctuation">{</span>      list<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>      listSetup<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>      listOneTimeSetup<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>      Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span>Count<span class="token punctuation">)</span><span class="token punctuation">;</span>      Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>listOneTimeSetup<span class="token punctuation">.</span>Count<span class="token punctuation">)</span><span class="token punctuation">;</span>      Assert<span class="token punctuation">.</span><span class="token function">AreEqual</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> listSetup<span class="token punctuation">.</span>Count<span class="token punctuation">)</span><span class="token punctuation">;</span>      Assert<span class="token punctuation">.</span><span class="token function">AreEqual</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span>Count<span class="token punctuation">,</span> listOneTimeSetup<span class="token punctuation">.</span>Count<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><img src="/2019/12/17/nunit-xunit-test-case-isolation-setup/nunit-nonparallel-variables.png" title="nunit-nonparallel-variables"><h2 id="xUnit-NonParallel"><a href="#xUnit-NonParallel" class="headerlink" title="xUnit NonParallel"></a>xUnit NonParallel</h2><p>這邊只測了 xUnit 預設行為，測試結果是每個 TestCase 都是新的獨立的類別實體。</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">xUnitUnitTest</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> listSetup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> listOneTimeSetup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> ITestOutputHelper output<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">xUnitUnitTest</span><span class="token punctuation">(</span>ITestOutputHelper output<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>output <span class="token operator">=</span> output<span class="token punctuation">;</span>    <span class="token punctuation">[</span>Theory<span class="token punctuation">]</span>    <span class="token punctuation">[</span><span class="token function">InlineData</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token punctuation">[</span><span class="token function">InlineData</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token punctuation">[</span><span class="token function">InlineData</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token punctuation">[</span><span class="token function">InlineData</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token punctuation">[</span><span class="token function">InlineData</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token punctuation">[</span><span class="token function">InlineData</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token punctuation">[</span><span class="token function">InlineData</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token punctuation">[</span><span class="token function">InlineData</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token punctuation">[</span><span class="token function">InlineData</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token punctuation">[</span><span class="token function">InlineData</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token punctuation">[</span><span class="token function">InlineData</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token punctuation">[</span><span class="token function">InlineData</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token punctuation">[</span><span class="token function">InlineData</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token punctuation">[</span><span class="token function">InlineData</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token punctuation">[</span><span class="token function">InlineData</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token punctuation">[</span><span class="token function">InlineData</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">TestA</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        list<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        listSetup<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        listOneTimeSetup<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        output<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span>Count<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        output<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>listOneTimeSetup<span class="token punctuation">.</span>Count<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Assert<span class="token punctuation">.</span><span class="token function">Single</span><span class="token punctuation">(</span>listSetup<span class="token punctuation">)</span><span class="token punctuation">;</span>        Assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span>Count<span class="token punctuation">,</span> listOneTimeSetup<span class="token punctuation">.</span>Count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><img src="/2019/12/17/nunit-xunit-test-case-isolation-setup/xunit-nonparallel-variables.png" title="xunit-nonparallel-variables"><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://github.com/GhostTW/demos/tree/master/nunit-xunit-test-case-isolation-setup/NUnitTestProject/" target="_blank" rel="noopener">此次程式碼</a><br><a href="https://github.com/nunit/docs/wiki/SetUp-and-TearDown-Changes" target="_blank" rel="noopener">NUnit SetUp-and-TearDown-Changes</a><br><a href="https://xunit.net/docs/shared-context" target="_blank" rel="noopener">xunit shared-context</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> dotnet </tag>
            
            <tag> xunit </tag>
            
            <tag> nunit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitLab Badge api 用 img.shield 更新</title>
      <link href="/2019/12/10/gitlab-update-badge-with-img-shield/"/>
      <url>/2019/12/10/gitlab-update-badge-with-img-shield/</url>
      
        <content type="html"><![CDATA[<h2 id="情境"><a href="#情境" class="headerlink" title="情境"></a>情境</h2><p>最近本來需要在 gitlab project 頁面上做一個更新 badge 資訊的功能，要將 badge 顯示成 環境|commit-sha1 點擊後會連到該 commit 頁面。<br>普遍作法看起來都是給一個固定網址連到 web api 由 api 來決定圖片樣式及連結資訊，這樣就需要自己寫個簡易的 api 維護就想試看看盡量減少需要維護的程式數量的方式，雖然後來這個方案沒有被使用，但還是紀錄一下這隻 script。</p><p>這隻 script 只要輸入 token, project, env, git_sha1 就可以自動幫你的 project badge 加上或更新成類似這樣 dev|955c03e4 ，點擊後還會自動連到該 commit 頁面</p><h2 id="img-shield"><a href="#img-shield" class="headerlink" title="img.shield"></a>img.shield</h2><p>這個<a href="https://shields.io/" target="_blank" rel="noopener">服務</a>提供產生靜態或動態 badge 的服務</p><h3 id="static"><a href="#static" class="headerlink" title="static"></a>static</h3><p><a href="https://img.shields.io/static/v1?label=" target="_blank" rel="noopener">https://img.shields.io/static/v1?label=</a><label>&amp;message=<message>&amp;color=<color><br><a href="https://img.shields.io/badge/test-message-yellow" target="_blank" rel="noopener">https://img.shields.io/badge/test-message-yellow</a></color></message></label></p><p>只要變動 test, message, yellow 為你想要的資訊，就可以產生一個 badge 給你</p><h3 id="dynamic"><a href="#dynamic" class="headerlink" title="dynamic"></a>dynamic</h3><p><a href="https://img.shields.io/badge/dynamic/json?url=" target="_blank" rel="noopener">https://img.shields.io/badge/dynamic/json?url=</a><url>&amp;label=<label>&amp;query=&lt;$.DATA.SUBDATA&gt;&amp;color=<color>&amp;prefix=<prefix>&amp;suffix=<suffix></suffix></prefix></color></label></url></p><h2 id="gitlab-badge-api"><a href="#gitlab-badge-api" class="headerlink" title="gitlab badge api"></a>gitlab badge api</h2><p>只要修改對應的變數就可以產生或更新 gitlab 上的 project</p><h3 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h3><p><code>curl -X POST --header &quot;Private-Token: $GITLAB_TOKEN&quot; &quot;${GET_BADGES_URL}&quot; --data &quot;link_url=$LINK_URL&amp;image_url=$IMG_URL&quot;</code></p><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><p><code>curl -X PUT --header &quot;Private-Token: $GITLAB_TOKEN&quot; &quot;${GET_BADGES_URL}/${badge_id}&quot; --data &quot;link_url=$LINK_URL&amp;image_url=$IMG_URL&quot;</code></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://gist.github.com/GhostTW/0763d0f6ef05ab4ce7931fdf43fc586f" target="_blank" rel="noopener">script</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> gitlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MariaDb 在不同 isolation level 下的行為及解決的問題</title>
      <link href="/2019/12/08/mariadb-transaction-isolation-level/"/>
      <url>/2019/12/08/mariadb-transaction-isolation-level/</url>
      
        <content type="html"><![CDATA[<p>此練習使用 Sql 與 MySqlWorkBench 練習實作不同的 Isolation Level 對資料造成的影響，分別有 Dirty Data, Non-Repeatable, Phantom Data 的問題．</p><h2 id="實驗資料庫的建立"><a href="#實驗資料庫的建立" class="headerlink" title="實驗資料庫的建立"></a>實驗資料庫的建立</h2><p>相關程式碼皆在 <a href="https://github.com/GhostTW/demos" target="_blank" rel="noopener">demo repo</a> 下的 <code>demo-storage-scenarios</code> 資料夾<br>使用範例程式資料夾 <code>database</code> 下的 <code>docker-compose</code> 啟動設定好的實驗資料庫</p><p><code>docker-compose up TestDB</code></p><h2 id="00-Transaction-Commit"><a href="#00-Transaction-Commit" class="headerlink" title="00 Transaction Commit"></a>00 Transaction Commit</h2><p>基本 Transaction 使用並 Commit．</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># step 1</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">User</span><span class="token punctuation">;</span></code></pre><p>原始資料</p><img src="/2019/12/08/mariadb-transaction-isolation-level/default-users.png" title="default-users"><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># step 2</span><span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span><span class="token punctuation">;</span><span class="token keyword">UPDATE</span> <span class="token keyword">User</span> <span class="token keyword">SET</span> IsActive <span class="token operator">=</span> <span class="token number">0</span> <span class="token keyword">WHERE</span> Code <span class="token operator">=</span> <span class="token string">'Admin'</span><span class="token punctuation">;</span><span class="token keyword">COMMIT</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">User</span><span class="token punctuation">;</span></code></pre><p>結果</p><img src="/2019/12/08/mariadb-transaction-isolation-level/commit-result.png" title="commit-result"><h2 id="01-Transaction-Rollback"><a href="#01-Transaction-Rollback" class="headerlink" title="01 Transaction Rollback"></a>01 Transaction Rollback</h2><p>基本 Transaction 使用並 Rollback 放棄變更．</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># step 1</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">User</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># step 2</span><span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span><span class="token punctuation">;</span><span class="token keyword">UPDATE</span> <span class="token keyword">User</span> <span class="token keyword">SET</span> IsActive <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">WHERE</span> Code <span class="token operator">=</span> <span class="token string">'Admin'</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">User</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># step 3</span><span class="token keyword">ROLLBACK</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">User</span><span class="token punctuation">;</span></code></pre><img src="/2019/12/08/mariadb-transaction-isolation-level/rollback-result.png" title="rollback-result"><h2 id="02-Check-current-session-status"><a href="#02-Check-current-session-status" class="headerlink" title="02 Check current session status"></a>02 Check current session status</h2><p>檢查目前連線 session 的 isolation level 與有沒有執行中的 transaction．</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># step 1 get current session isolation level setting.</span><span class="token keyword">SELECT</span> @<span class="token variable">@TX_ISOLATION</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># step 2</span><span class="token keyword">SET</span> <span class="token keyword">SESSION</span> <span class="token keyword">TRANSACTION</span> <span class="token keyword">ISOLATION LEVEL</span> <span class="token keyword">READ</span> <span class="token keyword">UNCOMMITTED</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> @<span class="token variable">@TX_ISOLATION</span><span class="token punctuation">;</span></code></pre><img src="/2019/12/08/mariadb-transaction-isolation-level/check-isolation-level.png" title="check-isolation-level"><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># step 3</span><span class="token keyword">SET</span> <span class="token keyword">SESSION</span> <span class="token keyword">TRANSACTION</span> <span class="token keyword">ISOLATION LEVEL</span> <span class="token keyword">REPEATABLE</span> <span class="token keyword">READ</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># step 4 get current session working transaction.</span><span class="token keyword">SELECT</span> @<span class="token variable">@IN_TRANSACTION</span><span class="token punctuation">;</span></code></pre><img src="/2019/12/08/mariadb-transaction-isolation-level/check-transaction.png" title="check-transaction"><h2 id="03-DirtyRead"><a href="#03-DirtyRead" class="headerlink" title="03 DirtyRead"></a>03 DirtyRead</h2><p>在 MySqlWorkBench 開啟兩個 Session 連線至資料庫，使用不同的 isolation level 同時操作一樣的資料．<br>Session B 更改資料，但在未送出 commit 前被 SessionA 使用 ReadUncommitted 讀到髒資料．</p><ul><li>Step 1 Session A</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># step 1</span><span class="token keyword">SET</span> <span class="token keyword">SESSION</span> <span class="token keyword">TRANSACTION</span> <span class="token keyword">ISOLATION LEVEL</span> <span class="token keyword">READ</span> <span class="token keyword">UNCOMMITTED</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> @<span class="token variable">@tx_isolation</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">User</span><span class="token punctuation">;</span></code></pre><img src="/2019/12/08/mariadb-transaction-isolation-level/read-uncommitted.png" title="read-uncommitted"> <img src="/2019/12/08/mariadb-transaction-isolation-level/default-users.png" title="default-users"><ul><li>Step 2 SessionB<br>建立一個 transaction 但不結束，觀察另一個 session 的使用狀況．</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span><span class="token punctuation">;</span><span class="token keyword">UPDATE</span> <span class="token keyword">User</span> <span class="token keyword">SET</span> IsActive <span class="token operator">=</span> <span class="token number">0</span> <span class="token keyword">WHERE</span> Code <span class="token operator">=</span> <span class="token string">'Admin'</span><span class="token punctuation">;</span></code></pre><ul><li>Step 3 SessionA<br>讀取到尚未 commit 的資料.</li></ul><pre class=" language-sql">SELECT * FROM User WHERE Code = &#39;Admin;</code></pre><p><code>IsActive: 0</code></p><ul><li>Step 4 SessionA<br>改變 SessionA 的 isolation level 驗證該交易只能拿到 committed 過的資料．</li></ul><pre><code class="sql"><code class="language-sql">SELECT * FROM User WHERE Code = &#39;Admin;</code></pre><p><code>IsActive: 0</code></p><ul><li>Step 4 SessionA<br>改變 SessionA 的 isolation level 驗證該交易只能拿到 committed 過的資料．</li></ul><pre><code class="sql">SET SESSION TRANSACTION ISOLATION LEVEL READ COMMITTED;SELECT @@tx_isolation;SELECT * FROM User WHERE Code = 'Admin;</code></pre><p><code>IsActive: 1</code></p><ul><li>Step 5 SessionB<br>將 transaction commit 送出</li></ul><pre class=" language-sql">COMMIT;</code></pre><ul><li>Step 6 SessionA get committed data.<br>SessionA 會取得 commit 後的資料．</li></ul><pre><code class="sql">SELECT * FROM User WHERE Code = &#39;Admin;</code></pre><p><code>IsActive: 0</code></p><h2 id="04-NonRepeatable-Read"><a href="#04-NonRepeatable-Read" class="headerlink" title="04 NonRepeatable Read"></a>04 NonRepeatable Read</h2><p>當兩個交易同時發生，交易 A 讀取完值後該值被交易 B 更改掉，但交易 A 仍未結束，會導致第二次讀取同一個值是已被交易 B 更改的．當資料前後不一致時，可能會造成邏輯判斷的錯誤．</p><ul><li>Step 1 SessionA</li></ul><pre><code class="sql"><code class="language-sql">COMMIT;</code></pre><ul><li>Step 6 SessionA get committed data.<br>SessionA 會取得 commit 後的資料．</li></ul><pre><code class="sql">SELECT * FROM User WHERE Code = &#39;Admin;</code></pre><p><code>IsActive: 0</code></p><h2 id="04-NonRepeatable-Read"><a href="#04-NonRepeatable-Read" class="headerlink" title="04 NonRepeatable Read"></a>04 NonRepeatable Read</h2><p>當兩個交易同時發生，交易 A 讀取完值後該值被交易 B 更改掉，但交易 A 仍未結束，會導致第二次讀取同一個值是已被交易 B 更改的．當資料前後不一致時，可能會造成邏輯判斷的錯誤．</p><ul><li>Step 1 SessionA</li></ul><pre><code class="sql">SET SESSION TRANSACTION ISOLATION LEVEL READ COMMITTED;SELECT @@tx_isolation;START TRANSACTION;SELECT * FROM User;</code></pre><p><code>Password: 1E867FA1A3A64AB5E1EE21BD76F05912</code></p><ul><li>Step 2 SessionB</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span><span class="token punctuation">;</span><span class="token keyword">UPDATE</span> <span class="token keyword">User</span> <span class="token keyword">SET</span> Password <span class="token operator">=</span> <span class="token string">'0'</span> <span class="token keyword">WHERE</span> Code <span class="token operator">=</span> <span class="token string">'Test001'</span><span class="token punctuation">;</span><span class="token keyword">COMMIT</span><span class="token punctuation">;</span></code></pre><p><code>Password: 0</code></p><ul><li>Step 3 SessionA<br>更新時與第一次不一樣的值，結果仍是 SessionB 改的 0</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">User</span><span class="token punctuation">;</span><span class="token keyword">COMMIT</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">User</span><span class="token punctuation">;</span></code></pre><p>commit 前第二次讀取會取到被更改的值．<br><code>Password: 0</code><br><code>Password: 0</code></p><ul><li>Step 4 SessionA<br>使用 REPEATABLE READ 防止此情況發生</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SET</span> <span class="token keyword">SESSION</span> <span class="token keyword">TRANSACTION</span> <span class="token keyword">ISOLATION LEVEL</span> <span class="token keyword">REPEATABLE</span> <span class="token keyword">READ</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> @<span class="token variable">@tx_isolation</span><span class="token punctuation">;</span><span class="token keyword">UPDATE</span> <span class="token keyword">User</span> <span class="token keyword">SET</span> Password <span class="token operator">=</span> <span class="token string">'1E867FA1A3A64AB5E1EE21BD76F05912'</span> <span class="token keyword">WHERE</span> Code <span class="token operator">=</span> <span class="token string">'Test001'</span><span class="token punctuation">;</span><span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">User</span><span class="token punctuation">;</span></code></pre><p><code>Password: 1E867FA1A3A64AB5E1EE21BD76F05912</code></p><ul><li>Step 5 SessionB</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span><span class="token punctuation">;</span><span class="token keyword">UPDATE</span> <span class="token keyword">User</span> <span class="token keyword">SET</span> Password <span class="token operator">=</span> <span class="token string">'1'</span> <span class="token keyword">WHERE</span> Code <span class="token operator">=</span> <span class="token string">'Test001'</span><span class="token punctuation">;</span><span class="token keyword">COMMIT</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">User</span><span class="token punctuation">;</span></code></pre><p><code>Password: 1</code></p><ul><li>Step 6 SessionA</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">User</span><span class="token punctuation">;</span>、<span class="token keyword">COMMIT</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">User</span><span class="token punctuation">;</span></code></pre><p>commit 前第二次讀取會取到跟第一次一樣的值．</p><p><code>Password: 1E867FA1A3A64AB5E1EE21BD76F05912</code><br><code>Password: 1</code></p><ul><li>Step 7 SessionA<br>使用 <code>lock in share mode</code> 讓 SessionB 等待</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">UPDATE</span> <span class="token keyword">User</span> <span class="token keyword">SET</span> Password <span class="token operator">=</span> <span class="token string">'1E867FA1A3A64AB5E1EE21BD76F05912'</span> <span class="token keyword">WHERE</span> Code <span class="token operator">=</span> <span class="token string">'Test001'</span><span class="token punctuation">;</span><span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">User</span> <span class="token keyword">LOCK</span> <span class="token operator">IN</span> <span class="token keyword">SHARE MODE</span><span class="token punctuation">;</span></code></pre><ul><li>Step 8 SessionB</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span><span class="token punctuation">;</span><span class="token keyword">UPDATE</span> <span class="token keyword">User</span> <span class="token keyword">SET</span> Password <span class="token operator">=</span> <span class="token string">'1'</span> <span class="token keyword">WHERE</span> Code <span class="token operator">=</span> <span class="token string">'Test001'</span><span class="token punctuation">;</span><span class="token keyword">COMMIT</span><span class="token punctuation">;</span></code></pre><ul><li>Step 9 SessionA</li></ul><pre class=" language-sql">COMMIT;</code></pre><h2 id="05-Phantom-Read"><a href="#05-Phantom-Read" class="headerlink" title="05 Phantom Read"></a>05 Phantom Read</h2><p>當兩個交易進行時，Ｂ交易對資料做新增或刪除時，Ａ交易不會知道有關新增刪除的資料．</p><ul><li>Step 1 SessionA<br>原始資料有三筆</li></ul><pre><code class="sql"><code class="language-sql">COMMIT;</code></pre><h2 id="05-Phantom-Read"><a href="#05-Phantom-Read" class="headerlink" title="05 Phantom Read"></a>05 Phantom Read</h2><p>當兩個交易進行時，Ｂ交易對資料做新增或刪除時，Ａ交易不會知道有關新增刪除的資料．</p><ul><li>Step 1 SessionA<br>原始資料有三筆</li></ul><pre><code class="sql">SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;SELECT @@tx_isolation;UPDATE User SET IsActive = 1 WHERE Code = 'Admin';START TRANSACTION;SELECT * FROM User;</code></pre><ul><li>Step 2 SessionB<br>新增一筆資料</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token keyword">User</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'testP0'</span><span class="token punctuation">,</span> <span class="token string">'1E867FA1A3A64AB5E1EE21BD76F05912'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">COMMIT</span><span class="token punctuation">;</span></code></pre><ul><li>Step 3 SessionA<br>仍是取到三筆資料</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">User</span><span class="token punctuation">;</span><span class="token keyword">COMMIT</span><span class="token punctuation">;</span></code></pre><ul><li>Step 4 SessionA<br>使用 Serialiazable</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SET</span> <span class="token keyword">SESSION</span> <span class="token keyword">TRANSACTION</span> <span class="token keyword">ISOLATION LEVEL</span> <span class="token keyword">SERIALIZABLE</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> @<span class="token variable">@tx_isolation</span><span class="token punctuation">;</span><span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">User</span><span class="token punctuation">;</span></code></pre><ul><li>Step 5 SessionB<br>新增一筆資料，但因為是 Serializable 進入等待．</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token keyword">User</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'testP1'</span><span class="token punctuation">,</span> <span class="token string">'1E867FA1A3A64AB5E1EE21BD76F05912'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">COMMIT</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">User</span><span class="token punctuation">;</span></code></pre><ul><li>Step 6 SessionA<br>結束 transaction 後，交易 B 才將資料新增進去．</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">COMMIT</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">User</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> mariadb </tag>
            
            <tag> database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 .Net Core Console 自動將設定檔對應到類別上</title>
      <link href="/2019/12/05/net-core3-config-to-class/"/>
      <url>/2019/12/05/net-core3-config-to-class/</url>
      
        <content type="html"><![CDATA[<p>今天在工作上需要在 .Net Core 3 Console app 上將 appsettings.json 的設定檔轉到類別物件上，但是找到的資訊都是在 Asp.net Core 3 上的範例，後來就自行嘗試在 Console 上用一樣的方式試看看，好在該套件並不一定要跟 Asp.net core 3 一起使用。</p><p>順便嘗試不同的設定檔格式轉換，官方文件上也有提供各種不同的 provider 供解析轉換。</p><table><thead><tr><th align="left">Provider</th><th>Provides configuration from…</th></tr></thead><tbody><tr><td align="left">Azure Key Vault Configuration Provider (Security topics)</td><td>Azure Key Vault</td></tr><tr><td align="left">Azure App Configuration Provider (Azure documentation)</td><td>Azure App Configuration</td></tr><tr><td align="left">Command-line Configuration Provider</td><td>Command-line parameters</td></tr><tr><td align="left">Custom configuration provider</td><td>Custom source</td></tr><tr><td align="left">Environment Variables Configuration Provider</td><td>Environment variables</td></tr><tr><td align="left">File Configuration Provider</td><td>Files (INI, JSON, XML)</td></tr><tr><td align="left">Key-per-file Configuration Provider</td><td>Directory files</td></tr><tr><td align="left">Memory Configuration Provider</td><td>In-memory collections</td></tr><tr><td align="left">User secrets (Secret Manager) (Security topics)</td><td>File in the user profile directory</td></tr></tbody></table><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Windows 10 Pro version 2004 build 19033.1</li><li>VisualStudio 2019</li><li>dotnet sdk 2.2.402</li><li>dotnet sdk 3.0.101</li></ul><h2 id="Json"><a href="#Json" class="headerlink" title="Json"></a>Json</h2><h3 id="標準-Json-物件"><a href="#標準-Json-物件" class="headerlink" title="標準 Json 物件"></a>標準 Json 物件</h3><h4 id="套件"><a href="#套件" class="headerlink" title="套件"></a>套件</h4><pre class=" language-csharp"><code class="language-csharp"><span class="token operator">&lt;</span>PackageReference Include<span class="token operator">=</span><span class="token string">"Microsoft.Extensions.Configuration"</span> Version<span class="token operator">=</span><span class="token string">"3.1.0"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>PackageReference Include<span class="token operator">=</span><span class="token string">"Microsoft.Extensions.Configuration.Json"</span> Version<span class="token operator">=</span><span class="token string">"3.1.0"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>PackageReference Include<span class="token operator">=</span><span class="token string">"Microsoft.Extensions.Options.ConfigurationExtensions"</span> Version<span class="token operator">=</span><span class="token string">"3.1.0"</span> <span class="token operator">/</span><span class="token operator">></span></code></pre><h4 id="設定檔"><a href="#設定檔" class="headerlink" title="設定檔"></a>設定檔</h4><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"section0"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"key0"</span><span class="token operator">:</span> <span class="token string">"section0-key0-value"</span><span class="token punctuation">,</span>    <span class="token property">"key1"</span><span class="token operator">:</span> <span class="token string">"section0-key1-value"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"section1"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"key0"</span><span class="token operator">:</span> <span class="token string">"section1-key0-value"</span><span class="token punctuation">,</span>    <span class="token property">"key1"</span><span class="token operator">:</span> <span class="token string">"section1-key1-value"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="類別"><a href="#類別" class="headerlink" title="類別"></a>類別</h4><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RootConfig</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> SectionConfig Section0 <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> SectionConfig Section1 <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SectionConfig</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">string</span> Key0 <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">string</span> Key1 <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="程式"><a href="#程式" class="headerlink" title="程式"></a>程式</h4><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Json_AppSettings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Keys are case-insensitive</span>    <span class="token keyword">var</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConfigurationBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AddJsonFile</span><span class="token punctuation">(</span><span class="token string">"rootconfig.json"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> rootConfig <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token generic-method function">Get<span class="token punctuation">&lt;</span>RootConfig<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token function">nameof</span><span class="token punctuation">(</span>Json_AppSettings<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>rootConfig<span class="token punctuation">.</span>Section0<span class="token punctuation">.</span>Key0<span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>rootConfig<span class="token punctuation">.</span>Section0<span class="token punctuation">.</span>Key1<span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>rootConfig<span class="token punctuation">.</span>Section1<span class="token punctuation">.</span>Key0<span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>rootConfig<span class="token punctuation">.</span>Section1<span class="token punctuation">.</span>Key1<span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="結果"><a href="#結果" class="headerlink" title="結果"></a>結果</h4><img src="/2019/12/05/net-core3-config-to-class/json-config-result.png" title="json-config-result"><h3 id="Json-物件使用冒號分隔"><a href="#Json-物件使用冒號分隔" class="headerlink" title="Json 物件使用冒號分隔"></a>Json 物件使用冒號分隔</h3><h4 id="設定檔-1"><a href="#設定檔-1" class="headerlink" title="設定檔"></a>設定檔</h4><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"ReportSheet:OutPutPath"</span><span class="token operator">:</span> <span class="token string">"/Export/"</span><span class="token punctuation">,</span>  <span class="token property">"ReportSheet:ProjectsPackagesList"</span><span class="token operator">:</span> <span class="token string">"ProjectsPkgsList"</span><span class="token punctuation">,</span>  <span class="token property">"ReportSheet:PackageInfoList"</span><span class="token operator">:</span> <span class="token string">"PackageInfoList"</span><span class="token punctuation">}</span></code></pre><h4 id="類別-1"><a href="#類別-1" class="headerlink" title="類別"></a>類別</h4><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReportConfig</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> ReportSectionConfig ReportSheet <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReportSectionConfig</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">string</span> OutPutPath <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">string</span> ProjectsPackagesList <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">string</span> PackageInfoList <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="程式-1"><a href="#程式-1" class="headerlink" title="程式"></a>程式</h4><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Json_AppSettings_Colon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConfigurationBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AddJsonFile</span><span class="token punctuation">(</span><span class="token string">"appsettings.json"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> reportConfig <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token generic-method function">Get<span class="token punctuation">&lt;</span>ReportConfig<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token function">nameof</span><span class="token punctuation">(</span>Json_AppSettings_Colon<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>reportConfig<span class="token punctuation">.</span>ReportSheet<span class="token punctuation">.</span>OutPutPath<span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>reportConfig<span class="token punctuation">.</span>ReportSheet<span class="token punctuation">.</span>PackageInfoList<span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>reportConfig<span class="token punctuation">.</span>ReportSheet<span class="token punctuation">.</span>ProjectsPackagesList<span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="結果-1"><a href="#結果-1" class="headerlink" title="結果"></a>結果</h4><img src="/2019/12/05/net-core3-config-to-class/json-colon-config-result.png" title="json-colon-config-result"><h3 id="使用參數式"><a href="#使用參數式" class="headerlink" title="使用參數式"></a>使用參數式</h3><p>這邊需要多安裝一個 <code>Microsoft.Extensions.Configuration.CommandLine</code> 套件</p><h4 id="套件-1"><a href="#套件-1" class="headerlink" title="套件"></a>套件</h4><pre class=" language-csharp">&lt;PackageReference Include=&quot;Microsoft.Extensions.Configuration.CommandLine&quot; Version=&quot;3.1.0&quot; /&gt;</code></pre><h4 id="類別-2"><a href="#類別-2" class="headerlink" title="類別"></a>類別</h4><pre><code class="csharp"><code class="language-csharp">&lt;PackageReference Include=&quot;Microsoft.Extensions.Configuration.CommandLine&quot; Version=&quot;3.1.0&quot; /&gt;</code></pre><h4 id="類別-2"><a href="#類別-2" class="headerlink" title="類別"></a>類別</h4><pre><code class="csharp">public class CommandlineArgumentsConfig{    public string User { get; set; }    public string Password { get; set; }    public string Address { get; set; }    public string Mail { get; set; }    public string Comment { get; set; }}</code></pre><h4 id="程式-2"><a href="#程式-2" class="headerlink" title="程式"></a>程式</h4><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Commandline_arguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token string">"--user"</span><span class="token punctuation">,</span> <span class="token string">"ghost"</span><span class="token punctuation">,</span> <span class="token string">"--password=123456"</span><span class="token punctuation">,</span> <span class="token string">"address=tw"</span><span class="token punctuation">,</span> <span class="token string">"/mail"</span><span class="token punctuation">,</span> <span class="token string">"ghost@everwhere.com"</span><span class="token punctuation">,</span> <span class="token string">"/comment=ok"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//Keys are case-insensitive</span>    <span class="token keyword">var</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConfigurationBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AddCommandLine</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> rootConfig <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token generic-method function">Get<span class="token punctuation">&lt;</span>CommandlineArgumentsConfig<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token function">nameof</span><span class="token punctuation">(</span>Commandline_arguments<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>rootConfig<span class="token punctuation">.</span>User<span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>rootConfig<span class="token punctuation">.</span>Password<span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>rootConfig<span class="token punctuation">.</span>Address<span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>rootConfig<span class="token punctuation">.</span>Mail<span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>rootConfig<span class="token punctuation">.</span>Comment<span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="結果-2"><a href="#結果-2" class="headerlink" title="結果"></a>結果</h4><img src="/2019/12/05/net-core3-config-to-class/commandline-config.png" title="commandline-config"><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://github.com/GhostTW/demos/tree/master/net-core3-config-to-class/ConfigurationMapping" target="_blank" rel="noopener">此次程式碼</a></p><p><a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/?view=aspnetcore-3.1" target="_blank" rel="noopener">docs.microsoft</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> dotnet </tag>
            
            <tag> core-3 </tag>
            
            <tag> config </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Google Analytics 連結 Google Search Console</title>
      <link href="/2019/12/04/seo-google-analytics-link-search-console/"/>
      <url>/2019/12/04/seo-google-analytics-link-search-console/</url>
      
        <content type="html"><![CDATA[<p>這篇是教學如何將 Google Analytics 連結到 Google Search Console 讓 Google Analytics 可以使用 Google Search Console 的資訊。<br>在設定連結完成後，就可以在報表裡看到是哪些使用者透過 Google Search 用了什麼關鍵字進入你的網站、進入的頁面、國家/地區、裝置。</p><p>關鍵字: 行銷可以針對目前的關鍵字價錢及使用者常用的關鍵字去評估購買需要的關鍵字。<br>進入頁面: 使用者從 Google Search 搜尋到你的網站而點擊進入的頁面。<br>國家/地區: 使用者從哪個國家/地區透過 Google Search 進入。<br>裝置: 使用者用什麼裝置透過 Google Search 進入。</p><p>可以藉由這些資料評估如何針對行銷調整。</p><h2 id="步驟"><a href="#步驟" class="headerlink" title="步驟"></a>步驟</h2><ol><li>進入管理頁面，點選資源設定</li></ol><img src="/2019/12/04/seo-google-analytics-link-search-console/ga-link-search-console-0.png" title="ga-link-search-console-0"><ol start="2"><li>滾動到下方，選擇 <code>調整 Search Console</code></li></ol><img src="/2019/12/04/seo-google-analytics-link-search-console/ga-link-search-console-0.png" title="ga-link-search-console-0"><ol start="3"><li>選擇新增</li></ol><img src="/2019/12/04/seo-google-analytics-link-search-console/ga-link-search-console-0.png" title="ga-link-search-console-0"><ol start="4"><li>此時會跳出新視窗，上面會顯示與你帳號相關的網站，將希望連結的網站加入確認即可。</li></ol><h3 id="結果"><a href="#結果" class="headerlink" title="結果"></a>結果</h3><img src="/2019/12/04/seo-google-analytics-link-search-console/ga-link-search-console-result.png" title="ga-link-search-console-result">]]></content>
      
      
      
        <tags>
            
            <tag> google-analytics </tag>
            
            <tag> seo </tag>
            
            <tag> search-console </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Google Analytics 設定過濾 bot 及爬蟲流量</title>
      <link href="/2019/12/04/seo-google-analytics-filter-robots/"/>
      <url>/2019/12/04/seo-google-analytics-filter-robots/</url>
      
        <content type="html"><![CDATA[<p>幾年前在第一份工作時，有幫忙公司研究 SEO 相關設定，最近因為架了部落格，重新對部落格再作調整，將之前的東西慢慢補上來。</p><p>這篇其實是 Google Analytics 的 master 預設設定，所以只是簡單說明一下在哪開關及作用。</p><p>基本上 master view 的是留原始資料的，我們如果要去蒐集過濾不同的資料檢視，最好是新建 view 來使用，如果有特別需求想蒐集爬蟲資訊的話可以開啟這個選項。</p><p>網路上有許多人或公司在蒐集各種網站資訊，至於他們怎麼使用資訊就不得而知了，但是要蒐集資訊用人力蒐集是最慢的，所以就有機器人 (robot) 或爬蟲 (crawler) 程式來負責蒐集各網站資訊。</p><p>而好的機器人或爬蟲都會遵守規則，在蒐集資訊時告知對方 (伺服器) 說我是程式來檢索資訊的，以便伺服器判斷如何使用，通常會有 robots.txt 規則給檢索程式知道，哪些可以蒐集、哪些不用蒐集，其實也只是建議而已，如果程式不遵守規定、不自報家門、不理規則，他一樣可以把你公開在網路上沒擋權限的資訊蒐集回家。</p><p>Google Analytics 這個設定就是依此判斷是否為活人或蒐集程式來過濾資訊，讓報表呈現更符合真實情況，才不會報表數據非常好看，但其實沒有半個活人在用你的網站。</p><h2 id="步驟"><a href="#步驟" class="headerlink" title="步驟"></a>步驟</h2><ol><li>進入左邊選單最下面的管理頁面</li></ol><img src="/2019/12/04/seo-google-analytics-filter-robots/ga-excludes-all-hits-from-bots-0.png" title="ga-excludes-all-hits-from-bots-0"><ol start="2"><li>選擇希望變更的 View 資料檢視設定</li></ol><img src="/2019/12/04/seo-google-analytics-filter-robots/ga-excludes-all-hits-from-bots-1.png" title="ga-excludes-all-hits-from-bots-1"><ol start="3"><li>開啟或關閉 <code>排除所有來自已知漫遊器和自動尋檢程式的匹配(Exclude all hits from known bots and spiders)</code></li></ol><img src="/2019/12/04/seo-google-analytics-filter-robots/ga-excludes-all-hits-from-bots-2.png" title="ga-excludes-all-hits-from-bots-2">]]></content>
      
      
      
        <tags>
            
            <tag> google-analytics </tag>
            
            <tag> seo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>.Net Core 3 HttpRequestMessage version 預設變更</title>
      <link href="/2019/12/03/net-core-3-new-http-default-version/"/>
      <url>/2019/12/03/net-core-3-new-http-default-version/</url>
      
        <content type="html"><![CDATA[<p>.Net Core 3.0 這次將 HttpRequestMessage 預設版本降回 1.1，但是在 .Net Core 2.1, .Net Core 2.2 時預設版本被調升為 2.0，而 2.1 之前則是 1.1。</p><table><thead><tr><th align="left">.net core version</th><th align="left">Http version</th></tr></thead><tbody><tr><td align="left">.net core 1+</td><td align="left">1.1</td></tr><tr><td align="left">.net core 2.1</td><td align="left">2.0</td></tr><tr><td align="left">.net core 2.2</td><td align="left">2.0</td></tr><tr><td align="left">.net core 3.0</td><td align="left">1.1</td></tr></tbody></table><p>這次會使用不同 .net core 版本 HttpClient 打 <code>https://http2.pro/</code> 驗證 response 的版號，並測試在 .net core 2.2 使用 http2 的方式。</p><p><code>https://http2.pro/</code> 這個網站可以幫忙測試目標 api 的 http2 狀態，也可以自行發 request 過去驗證。</p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Windows 10 Pro version 2004 build 19033.1</li><li>VisualStudio 2019</li><li>dotnet sdk 2.2.402</li><li>dotnet sdk 3.0.101</li></ul><h2 id="Net-Core-2-2-測試"><a href="#Net-Core-2-2-測試" class="headerlink" title=".Net Core 2.2 測試"></a>.Net Core 2.2 測試</h2><p>準備一個 .Net Core 2.2 版的 Console proj</p><p>準備三段程式測試，分別為<br>Test_Default : 驗證預設行為 Get 的版本。<br>Test_Default_HttpRequestMessage: 驗證使用 HttpRequestMessage 的版本。<br>Test_Set_HttpRequestMessage_HttpVersion20: 驗證使用 HttpRequestMessage 並使用 <code>System.Net.HttpVersion.Version20</code> 的版本。</p><p>測試完的結果會發現，response 怎麼跑都是 1.1 版。</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"{nameof(http_client_core22)}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Test_Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Test_Default_HttpRequestMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Test_Set_HttpRequestMessage_HttpVersion20</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">async</span> Task <span class="token function">Test_Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"{nameof(Test_Default)}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token keyword">var</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">GetAsync</span><span class="token punctuation">(</span><span class="token string">"https://http2.pro/api/v1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"receive response with http protocol {result.Version}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">async</span> Task <span class="token function">Test_Default_HttpRequestMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"{nameof(Test_Default_HttpRequestMessage)}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token keyword">var</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">var</span> httpRequestMessage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpRequestMessage</span><span class="token punctuation">(</span>HttpMethod<span class="token punctuation">.</span>Get<span class="token punctuation">,</span> <span class="token string">"https://http2.pro/api/v1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"{nameof(httpRequestMessage)} version {httpRequestMessage.Version}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">SendAsync</span><span class="token punctuation">(</span>httpRequestMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"receive response with http protocol {result.Version}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">async</span> Task <span class="token function">Test_Set_HttpRequestMessage_HttpVersion20</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"{nameof(Test_Set_HttpRequestMessage_HttpVersion20)}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token keyword">var</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">var</span> httpRequestMessage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpRequestMessage</span><span class="token punctuation">(</span>HttpMethod<span class="token punctuation">.</span>Get<span class="token punctuation">,</span> <span class="token string">"https://http2.pro/api/v1"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> Version <span class="token operator">=</span> System<span class="token punctuation">.</span>Net<span class="token punctuation">.</span>HttpVersion<span class="token punctuation">.</span>Version20 <span class="token punctuation">}</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"{nameof(httpRequestMessage)} version {httpRequestMessage.Version}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">SendAsync</span><span class="token punctuation">(</span>httpRequestMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"receive response with http protocol {result.Version}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>結果</p><img src="/2019/12/03/net-core-3-new-http-default-version/net-core-22-httprequestmessage-result.png" title="net-core-22-httprequestmessage-result"><h2 id="Net-Core-3-0-測試"><a href="#Net-Core-3-0-測試" class="headerlink" title=".Net Core 3.0 測試"></a>.Net Core 3.0 測試</h2><p>準備三段程式測試，分別為<br>Test_Default : 驗證預設行為 Get 的版本。<br>Test_Default_HttpRequestMessage: 驗證使用 HttpRequestMessage 的版本，。<br>Test_Set_HttpRequestMessage_Version20: 驗證使用 HttpRequestMessage 並使用 HTTP/2 的版本。</p><p>我們在每段裡面都使用 .net core 3.0 新支援 <code>DefaultRequestVersion</code> 的 api 查看預設版本。</p><p>測試完的結果會發現，有設定 HTTP/2 的 response 就會是 2.0 版了。</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">Test_Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Test_Default_HttpRequestMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Test_Set_HttpRequestMessage_Version20</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">async</span> Task <span class="token function">Test_Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"{nameof(Test_Default)}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">GetAsync</span><span class="token punctuation">(</span><span class="token string">"https://http2.pro/api/v1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"receive response with http protocol {result.Version}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">async</span> Task <span class="token function">Test_Default_HttpRequestMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"{nameof(Test_Default_HttpRequestMessage)}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"{nameof(client)} version {client.DefaultRequestVersion}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> httpRequestMessage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpRequestMessage</span><span class="token punctuation">(</span>HttpMethod<span class="token punctuation">.</span>Get<span class="token punctuation">,</span> <span class="token string">"https://http2.pro/api/v1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"{nameof(httpRequestMessage)} version {httpRequestMessage.Version}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">SendAsync</span><span class="token punctuation">(</span>httpRequestMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"receive response with http protocol {result.Version}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">async</span> Task <span class="token function">Test_Set_HttpRequestMessage_Version20</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"{nameof(Test_Set_HttpRequestMessage_Version20)}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"{nameof(client)} version {client.DefaultRequestVersion}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> httpRequestMessage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpRequestMessage</span><span class="token punctuation">(</span>HttpMethod<span class="token punctuation">.</span>Get<span class="token punctuation">,</span> <span class="token string">"https://http2.pro/api/v1"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> Version <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Version</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"{nameof(httpRequestMessage)} version {httpRequestMessage.Version}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">SendAsync</span><span class="token punctuation">(</span>httpRequestMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"receive response with http protocol {result.Version}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>結果</p><img src="/2019/12/03/net-core-3-new-http-default-version/net-core-3-httprequestmessage-result.png" title="net-core-3-httprequestmessage-result"><h2 id="Net-Core-2-2-開啟-HTTP-2-測試"><a href="#Net-Core-2-2-開啟-HTTP-2-測試" class="headerlink" title=".Net Core 2.2 開啟 HTTP/2 測試"></a>.Net Core 2.2 開啟 HTTP/2 測試</h2><p>使用 .Net Core 2.2 相同的程式碼，在建立 client 前加入 <code>AppContext.SetSwitch(&quot;System.Net.Http.UseSocketsHttpHandler&quot;, false);</code> 就可以讓 .NetCore 2.2 支援 HTTP/2。</p><p>這段是將系統環境變數 <code>DOTNET_SYSTEM_NET_HTTP_USESOCKETSHTTPHANDLE</code> 設為 0 或 false，讓 .Net Core 用回舊的 <code>HttpClientHandler</code>，也可以使用設定檔設定這項。</p><p>.Net Core 2.1 Preview 2 有說明他們使用新的 <a href="https://github.com/dotnet/corefx/blob/master/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/SocketsHttpHandler.cs" target="_blank" rel="noopener">SocketsHttpHandler</a> 作為 HttpClient 的預設，最大的差異是在效能上、與平台相依脫勾、跨平台的一致性行為。</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"{nameof(http_client_core22)}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    AppContext<span class="token punctuation">.</span><span class="token function">SetSwitch</span><span class="token punctuation">(</span><span class="token string">"System.Net.Http.UseSocketsHttpHandler"</span><span class="token punctuation">,</span> <span class="token keyword">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// turn http2 on !</span>    <span class="token function">Test_Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Test_Default_HttpRequestMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Test_Set_HttpRequestMessage_HttpVersion20</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>結果</p><img src="/2019/12/03/net-core-3-new-http-default-version/net-core-22-support-http2-httprequestmessage-result.png" title="net-core-22-support-http2-httprequestmessage-result"><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://github.com/GhostTW/demos/tree/master/httpclient-http2-core-2-3" target="_blank" rel="noopener">本次程式碼</a></p><p><a href="https://docs.microsoft.com/en-us/dotnet/core/compatibility/2.2-3.0#networking" target="_blank" rel="noopener">compatibility/2.2-3.0#networking</a></p><p><a href="https://stackoverflow.com/questions/53764083/use-http-2-with-httpclient-in-net" target="_blank" rel="noopener">use-http-2-with-httpclient-in-net</a></p><p><a href="https://devblogs.microsoft.com/dotnet/announcing-net-core-2-1-preview-2/" target="_blank" rel="noopener">announcing-net-core-2-1-preview-2</a></p>]]></content>
      
      
      <categories>
          
          <category> dotnet-core-3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dotnet </tag>
            
            <tag> core-3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>.Net Core 3 新功能 Worker Service</title>
      <link href="/2019/12/02/net-core-3-new-worker-service/"/>
      <url>/2019/12/02/net-core-3-new-worker-service/</url>
      
        <content type="html"><![CDATA[<h2 id="Net-Core-Worker-Service"><a href="#Net-Core-Worker-Service" class="headerlink" title=".Net Core Worker Service"></a>.Net Core Worker Service</h2><p>這個 .Net Core 3 的新功能將 windows service 功能包裝起來，方便開發 windows service ，更將 linux service 包裝起來，可以維護同個 source code 佈署不同環境，但本文目前先實作 windows 的部分。</p><h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul><li>VS 2019</li><li>Windows 10</li><li>.net sdk 3.0.101</li></ul><h3 id="建立專案"><a href="#建立專案" class="headerlink" title="建立專案"></a>建立專案</h3><ol><li>開新資料夾並在下面執行 <code>dotnet new worker</code>，資料夾下自動建立一個與資料夾相同名稱的專案。</li><li>安裝套件，Windows 可以只安裝 <code>WindowsServices</code>，linux 可以只安裝 <code>Systemd</code></li></ol><pre class=" language-powershell"><code class="language-powershell">dotnet add package Microsoft<span class="token punctuation">.</span>Extensions<span class="token punctuation">.</span>Hosting <span class="token operator">--</span>version 3<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1dotnet add package Microsoft<span class="token punctuation">.</span>Extensions<span class="token punctuation">.</span>Hosting<span class="token punctuation">.</span>Systemd <span class="token operator">--</span>version 3<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1dotnet add package Microsoft<span class="token punctuation">.</span>Extensions<span class="token punctuation">.</span>Hosting<span class="token punctuation">.</span>WindowsServices <span class="token operator">--</span>version 3<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1</code></pre><ol start="3"><li>在 <code>program.cs</code> 下加入以下兩行，在不同 OS 會啟用但不互相影響。</li></ol><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> IHostBuilder <span class="token function">CreateHostBuilder</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>    Host<span class="token punctuation">.</span><span class="token function">CreateDefaultBuilder</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">UseSystemd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// for linux</span>        <span class="token punctuation">.</span><span class="token function">UseWindowsService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// for windows</span>        <span class="token punctuation">.</span><span class="token function">ConfigureServices</span><span class="token punctuation">(</span><span class="token punctuation">(</span>hostContext<span class="token punctuation">,</span> services<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>        <span class="token punctuation">{</span>            services<span class="token punctuation">.</span><span class="token generic-method function">AddHostedService<span class="token punctuation">&lt;</span>Worker<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="建立-Windows-Service"><a href="#建立-Windows-Service" class="headerlink" title="建立 Windows Service"></a>建立 Windows Service</h3><ol><li>Build <code>dotnet publish -o output</code></li><li>註冊服務 <code>sc.exe create servicetest binPath=C:\Users\ghost\Projects\Github\demos\net-core-3-services\output\NetCore3Service.exe</code></li><li>啟動服務 <code>sc.exe start servicetest</code></li><li>在 Services 可以觀察到服務已啟動</li></ol><img src="/2019/12/02/net-core-3-new-worker-service/bg-service-cmd.png" title="bg-service-cmd"> <img src="/2019/12/02/net-core-3-new-worker-service/bg-service.png" title="bg-service"><h3 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h3><p><a href="https://github.com/GhostTW/demos/tree/master/net-core-3-services" target="_blank" rel="noopener">project</a></p>]]></content>
      
      
      <categories>
          
          <category> dotnet-core-3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dotnet </tag>
            
            <tag> core-3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 整合 Travis-ci 自動建置與發佈</title>
      <link href="/2019/12/01/init-blog-hexo-travisci/"/>
      <url>/2019/12/01/init-blog-hexo-travisci/</url>
      
        <content type="html"><![CDATA[<p>建立了新的部落格在 github.io 上面，想說順手把自動建置跟發佈一起做一做，但就遇到了一堆問題，原本以為 1~2 小時可以全部設定完，但整個週日就這樣不見了，主要還是沒用過 Travis-ci…</p><h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><h3 id="Github-Pages"><a href="#Github-Pages" class="headerlink" title="Github Pages"></a>Github Pages</h3><p>我記得幾年前的 Github Pages 是在 repo 裡開一條 github-page branch ，然後在這條 branch 上的東西可以透過 github.io 讀到，但今天在建立時發現一定要發到 master branch 上，導致有許多網路上的教學一不敷使用。</p><h3 id="Integrate-with-Travis-ci"><a href="#Integrate-with-Travis-ci" class="headerlink" title="Integrate with Travis-ci"></a>Integrate with Travis-ci</h3><p>這是整個 Travis-ci 與 blog 流程</p><img src="/2019/12/01/init-blog-hexo-travisci/deploy-hexo-github-travis.svg" title="deploy-hexo-github-travis"><ol><li><p>安裝 TravisCI app 在 github repo 上</p><p>這部分沒有紀錄到，請自行參考網路上的方式。<br><a href="https://github.com/apps/travis-ci" target="_blank" rel="noopener">install travis-ci app</a></p></li><li><p>我們先將建立好的 Hexo repo 搬到新建立的 branch hexo 上，推上去後再回去把 master branch 清光光。</p></li></ol><pre class=" language-powershell"><code class="language-powershell">git checkout <span class="token operator">-</span>b hexogit add <span class="token punctuation">.</span>git commit <span class="token operator">-</span>m <span class="token string">"move to hexo"</span>git pushgit checkout master<span class="token function">rm</span> C:\Users\ghost\Projects\Github\blog\ <span class="token operator">-</span>Recurse <span class="token operator">-</span>Forcegit add <span class="token punctuation">.</span>git commit <span class="token operator">-</span>m <span class="token string">"clean master"</span>git pushgit checkout hexo</code></pre><ol start="3"><li>在 repo 下建立一個 <code>.travis.yml</code> 給 travis-ci 使用，請自行換掉設定</li></ol><pre class=" language-yml"><code class="language-yml">sudo: requiredlanguage: node_jsnode_js: stablecache: npmbranches:  only:  - hexobefore_install:- npm install -g hexo-cliinstall:- npm installscript:- hexo clean- git config --global user.name "Ghost Yang"- git config --global user.email "ghosttw88@hotmail.com"- sed -i'' "s~git@github.com:GhostTW/ghosttw.github.io.git~https://${REPO_TOKEN}@github.com/GhostTW/ghosttw.github.io.git~" _config.yml- hexo deploy</code></pre><ol start="4"><li>在 github 取得 Personal Access token</li></ol><p>GitHub &gt; Settings &gt; Developer settings &gt; Personal access tokens &gt; Generate new token</p><img src="/2019/12/01/init-blog-hexo-travisci/github-personal-token-authorization.png" title="github-personal-token-authorization"><ol start="5"><li>把這組 token 處理過後加入設定檔<ol><li>確認有安裝過 ruby</li><li>cmd 在 repo 下，執行以下指令，記得換掉 {personal_access_token}</li></ol></li></ol><pre class=" language-bat"><code class="language-bat">gem isntall travistravis login --pro --github-token {personal_access_token}travis encrypt --com 'REPO_TOKEN={personal_access_token}' --add</code></pre><p>它會自動在 <code>.travis.yml</code> 加入設定，讓 travis 在 build 時可以拿這個 token 換掉一開始在 <code>.travis.yml</code> 裡的 <code>${REPO_TOKEN}</code> 字串</p><ol start="6"><li>_config.yml</li></ol><p>最後一步在 <code>_config.yml</code> 設定 hexo deploy 方式</p><pre class=" language-yml"><code class="language-yml">deploy:  type: git  repo: git@github.com:GhostTW/ghosttw.github.io.git  branch: master</code></pre><ol start="7"><li>Final</li></ol><p>最後將你的 blog 推到 hexo 後就會自動建置嚕!</p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> blog </tag>
            
            <tag> travis-ci </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
